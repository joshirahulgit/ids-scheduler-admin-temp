/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.4.3.0 (NJsonSchema v9.4.8.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming


import { AccountDto } from "app/dtos/Account.dto";
import { TaskDto } from "app/dtos/Task.dto";
import { EntityTypeDto, IEntityTypeDto } from "app/dtos/EntityType.dto";
import { CommentTypeDto } from "app/dtos/CommentType.dto";

export class UserDto implements IUserDto {
    id: number;
    token?: string;
    login?: string;
    firstName?: string;
    lastName?: string;
    password?: string;
    accounts?: AccountDto[];
    defaultAppointmentLength: string;
    profiles?: UserProfileDto[];
    currentProfile?: UserProfileDto;
    isSuperAdmin: boolean;
    isIDSUser: boolean;
    rolesString?: string;
    roles?: number[];

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.token = data["Token"];
            this.login = data["Login"];
            this.firstName = data["FirstName"];
            this.lastName = data["LastName"];
            this.password = data["Password"];
            if (data["Accounts"] && data["Accounts"].constructor === Array) {
                this.accounts = [];
                for (let item of data["Accounts"])
                    this.accounts.push(AccountDto.fromJS(item));
            }
            this.defaultAppointmentLength = data["DefaultAppointmentLength"];
            if (data["Profiles"] && data["Profiles"].constructor === Array) {
                this.profiles = [];
                for (let item of data["Profiles"])
                    this.profiles.push(UserProfileDto.fromJS(item));
            }
            this.currentProfile = data["CurrentProfile"] ? UserProfileDto.fromJS(data["CurrentProfile"]) : <any>undefined;
            this.isSuperAdmin = data["IsSuperAdmin"];
            this.isIDSUser = data["IsIDSUser"];
            this.rolesString = data["RolesString"];
            if (data["Roles"] && data["Roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["Roles"])
                    this.roles.push(item);
            }
        }
    }

    static fromJS(data: any): UserDto {
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Token"] = this.token;
        data["Login"] = this.login;
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Password"] = this.password;
        if (this.accounts && this.accounts.constructor === Array) {
            data["Accounts"] = [];
            for (let item of this.accounts)
                data["Accounts"].push(item.toJSON());
        }
        data["DefaultAppointmentLength"] = this.defaultAppointmentLength;
        if (this.profiles && this.profiles.constructor === Array) {
            data["Profiles"] = [];
            for (let item of this.profiles)
                data["Profiles"].push(item.toJSON());
        }
        data["CurrentProfile"] = this.currentProfile ? this.currentProfile.toJSON() : <any>undefined;
        data["IsSuperAdmin"] = this.isSuperAdmin;
        data["IsIDSUser"] = this.isIDSUser;
        data["RolesString"] = this.rolesString;
        if (this.roles && this.roles.constructor === Array) {
            data["Roles"] = [];
            for (let item of this.roles)
                data["Roles"].push(item);
        }
        return data;
    }
}

export interface IUserDto {
    id: number;
    token?: string;
    login?: string;
    firstName?: string;
    lastName?: string;
    password?: string;
    accounts?: AccountDto[];
    defaultAppointmentLength: string;
    profiles?: UserProfileDto[];
    currentProfile?: UserProfileDto;
    isSuperAdmin: boolean;
    isIDSUser: boolean;
    rolesString?: string;
    roles?: number[];
}



export enum DayOfWeek {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
}

export enum ReservationViewMode {
    Calendar = 0,
    ListView = 1,
}

export enum ScheduleMode {
    FromDate = 0,
    FromPatient = 1,
    SchedulePending = 2,
}

export class DtoBase implements IDtoBase {

    constructor(data?: IDtoBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
        }
    }

    static fromJS(data: any): DtoBase {
        let result = new DtoBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDtoBase {
}

export class TechCompleteSuggestionListDto extends DtoBase implements ITechCompleteSuggestionListDto {
    id: number;
    displayName?: string;
    isVisible: boolean;
    isDeleted: boolean;

    constructor(data?: ITechCompleteSuggestionListDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["Id"];
            this.displayName = data["DisplayName"];
            this.isVisible = data["IsVisible"];
            this.isDeleted = data["IsDeleted"];
        }
    }

    static fromJS(data: any): TechCompleteSuggestionListDto {
        let result = new TechCompleteSuggestionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["DisplayName"] = this.displayName;
        data["IsVisible"] = this.isVisible;
        data["IsDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data;
    }
}

export interface ITechCompleteSuggestionListDto extends IDtoBase {
    id: number;
    displayName?: string;
    isVisible: boolean;
    isDeleted: boolean;
}

export class AppointmentStatusDto extends DtoBase implements IAppointmentStatusDto {
    statusID: number;
    statusName?: string;
    color?: string;
    appliedStatusName?: string;
    isVisible: boolean;
    isDeleted: boolean;
    isSystemStatus: boolean;
    sortIndex: number;
    allowedTransition?: AppointmentStatusTransitionDto[];
    text?: string;
    systemName?: string;

    constructor(data?: IAppointmentStatusDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.statusID = data["StatusID"];
            this.statusName = data["StatusName"];
            this.color = data["Color"];
            this.appliedStatusName = data["AppliedStatusName"];
            this.isVisible = data["IsVisible"];
            this.isDeleted = data["IsDeleted"];
            this.isSystemStatus = data["IsSystemStatus"];
            this.sortIndex = data["SortIndex"];
            if (data["AllowedTransition"] && data["AllowedTransition"].constructor === Array) {
                this.allowedTransition = [];
                for (let item of data["AllowedTransition"])
                    this.allowedTransition.push(AppointmentStatusTransitionDto.fromJS(item));
            }
            this.text = data["Text"];
            this.systemName = data["SystemName"];
        }
    }

    static fromJS(data: any): AppointmentStatusDto {
        let result = new AppointmentStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StatusID"] = this.statusID;
        data["StatusName"] = this.statusName;
        data["Color"] = this.color;
        data["AppliedStatusName"] = this.appliedStatusName;
        data["IsVisible"] = this.isVisible;
        data["IsDeleted"] = this.isDeleted;
        data["IsSystemStatus"] = this.isSystemStatus;
        data["SortIndex"] = this.sortIndex;
        if (this.allowedTransition && this.allowedTransition.constructor === Array) {
            data["AllowedTransition"] = [];
            for (let item of this.allowedTransition)
                data["AllowedTransition"].push(item.toJSON());
        }
        data["Text"] = this.text;
        data["SystemName"] = this.systemName;
        super.toJSON(data);
        return data;
    }
}

export interface IAppointmentStatusDto extends IDtoBase {
    statusID: number;
    statusName?: string;
    color?: string;
    appliedStatusName?: string;
    isVisible: boolean;
    isDeleted: boolean;
    isSystemStatus: boolean;
    sortIndex: number;
    allowedTransition?: AppointmentStatusTransitionDto[];
    text?: string;
    systemName?: string;
}

export class AppointmentStatusTransitionDto implements IAppointmentStatusTransitionDto {
    statusId: number;
    patientViewSpecific: boolean;

    constructor(data?: IAppointmentStatusTransitionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.statusId = data["StatusId"];
            this.patientViewSpecific = data["PatientViewSpecific"];
        }
    }

    static fromJS(data: any): AppointmentStatusTransitionDto {
        let result = new AppointmentStatusTransitionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StatusId"] = this.statusId;
        data["PatientViewSpecific"] = this.patientViewSpecific;
        return data;
    }
}

export interface IAppointmentStatusTransitionDto {
    statusId: number;
    patientViewSpecific: boolean;
}

export class AppointmentResourceDto implements IAppointmentResourceDto {
    id: number;
    typeId: number;
    accountId: number;
    displayText?: string;

    constructor(data?: IAppointmentResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.typeId = data["TypeId"];
            this.accountId = data["AccountId"];
            this.displayText = data["DisplayText"];
        }
    }

    static fromJS(data: any): AppointmentResourceDto {
        let result = new AppointmentResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["TypeId"] = this.typeId;
        data["AccountId"] = this.accountId;
        data["DisplayText"] = this.displayText;
        return data;
    }
}

export interface IAppointmentResourceDto {
    id: number;
    typeId: number;
    accountId: number;
    displayText?: string;
}

export class PhysicianSpecialitiesDto extends DtoBase implements IPhysicianSpecialitiesDto {
    physicianSpecialities?: PhysicianSpecialityDto[];

    constructor(data?: IPhysicianSpecialitiesDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            if (data["PhysicianSpecialities"] && data["PhysicianSpecialities"].constructor === Array) {
                this.physicianSpecialities = [];
                for (let item of data["PhysicianSpecialities"])
                    this.physicianSpecialities.push(PhysicianSpecialityDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PhysicianSpecialitiesDto {
        let result = new PhysicianSpecialitiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.physicianSpecialities && this.physicianSpecialities.constructor === Array) {
            data["PhysicianSpecialities"] = [];
            for (let item of this.physicianSpecialities)
                data["PhysicianSpecialities"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPhysicianSpecialitiesDto extends IDtoBase {
    physicianSpecialities?: PhysicianSpecialityDto[];
}

export class PhysicianSpecialityDto extends DtoBase implements IPhysicianSpecialityDto {
    id: number;
    name?: string;
    isVisible: boolean;
    isDeleted: boolean;

    constructor(data?: IPhysicianSpecialityDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.isVisible = data["IsVisible"];
            this.isDeleted = data["IsDeleted"];
        }
    }

    static fromJS(data: any): PhysicianSpecialityDto {
        let result = new PhysicianSpecialityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["IsVisible"] = this.isVisible;
        data["IsDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data;
    }
}

export interface IPhysicianSpecialityDto extends IDtoBase {
    id: number;
    name?: string;
    isVisible: boolean;
    isDeleted: boolean;
}

export class UserProfileDto implements IUserProfileDto {
    commentDefaults?: UserProfileCommentDto;
    id: number;
    accountID: number;
    userId: number;
    roleId?: number;
    filters?: string;
    scheduleMode: ScheduleMode;
    defaultViewMode: number;
    columns?: ColumnConfigDto[];
    calendarDisplayMode: CalendarDisplayMode;
    firstVisibleHour: number;
    lastVisibleHour: number;
    patientInfoVisitIndex: number;
    captionMode: number;
    profileName?: string;
    tabsConfiguration?: { [key: string]: boolean; };
    isSummaryPageEnabled: boolean;
    isExportedSuccessfully?: boolean;
    isDefault: boolean;
    roleName?: string;
    isRoleProfile: boolean;
    profileNameExt?: string;

    constructor(data?: IUserProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.commentDefaults = data["CommentDefaults"] ? UserProfileCommentDto.fromJS(data["CommentDefaults"]) : <any>undefined;
            this.id = data["Id"];
            this.accountID = data["AccountID"];
            this.userId = data["UserId"];
            this.roleId = data["RoleId"];
            this.filters = data["Filters"];
            this.scheduleMode = data["ScheduleMode"];
            this.defaultViewMode = data["DefaultViewMode"];
            if (data["Columns"] && data["Columns"].constructor === Array) {
                this.columns = [];
                for (let item of data["Columns"])
                    this.columns.push(ColumnConfigDto.fromJS(item));
            }
            this.calendarDisplayMode = data["CalendarDisplayMode"];
            this.firstVisibleHour = data["FirstVisibleHour"];
            this.lastVisibleHour = data["LastVisibleHour"];
            this.patientInfoVisitIndex = data["PatientInfoVisitIndex"];
            this.captionMode = data["CaptionMode"];
            this.profileName = data["ProfileName"];
            if (data["TabsConfiguration"]) {
                this.tabsConfiguration = {};
                for (let key in data["TabsConfiguration"]) {
                    if (data["TabsConfiguration"].hasOwnProperty(key))
                        this.tabsConfiguration[key] = data["TabsConfiguration"][key];
                }
            }
            this.isSummaryPageEnabled = data["IsSummaryPageEnabled"];
            this.isExportedSuccessfully = data["IsExportedSuccessfully"];
            this.isDefault = data["IsDefault"];
            this.roleName = data["RoleName"];
            this.isRoleProfile = data["IsRoleProfile"];
            this.profileNameExt = data["ProfileNameExt"];
        }
    }

    static fromJS(data: any): UserProfileDto {
        let result = new UserProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CommentDefaults"] = this.commentDefaults ? this.commentDefaults.toJSON() : <any>undefined;
        data["Id"] = this.id;
        data["AccountID"] = this.accountID;
        data["UserId"] = this.userId;
        data["RoleId"] = this.roleId;
        data["Filters"] = this.filters;
        data["ScheduleMode"] = this.scheduleMode;
        data["DefaultViewMode"] = this.defaultViewMode;
        if (this.columns && this.columns.constructor === Array) {
            data["Columns"] = [];
            for (let item of this.columns)
                data["Columns"].push(item.toJSON());
        }
        data["CalendarDisplayMode"] = this.calendarDisplayMode;
        data["FirstVisibleHour"] = this.firstVisibleHour;
        data["LastVisibleHour"] = this.lastVisibleHour;
        data["PatientInfoVisitIndex"] = this.patientInfoVisitIndex;
        data["CaptionMode"] = this.captionMode;
        data["ProfileName"] = this.profileName;
        if (this.tabsConfiguration) {
            data["TabsConfiguration"] = {};
            for (let key in this.tabsConfiguration) {
                if (this.tabsConfiguration.hasOwnProperty(key))
                    data["TabsConfiguration"][key] = this.tabsConfiguration[key];
            }
        }
        data["IsSummaryPageEnabled"] = this.isSummaryPageEnabled;
        data["IsExportedSuccessfully"] = this.isExportedSuccessfully;
        data["IsDefault"] = this.isDefault;
        data["RoleName"] = this.roleName;
        data["IsRoleProfile"] = this.isRoleProfile;
        data["ProfileNameExt"] = this.profileNameExt;
        return data;
    }
}

export interface IUserProfileDto {
    commentDefaults?: UserProfileCommentDto;
    id: number;
    accountID: number;
    userId: number;
    roleId?: number;
    filters?: string;
    scheduleMode: ScheduleMode;
    defaultViewMode: number;
    columns?: ColumnConfigDto[];
    calendarDisplayMode: CalendarDisplayMode;
    firstVisibleHour: number;
    lastVisibleHour: number;
    patientInfoVisitIndex: number;
    captionMode: number;
    profileName?: string;
    tabsConfiguration?: { [key: string]: boolean; };
    isSummaryPageEnabled: boolean;
    isExportedSuccessfully?: boolean;
    isDefault: boolean;
    roleName?: string;
    isRoleProfile: boolean;
    profileNameExt?: string;
}

export class UserProfileCommentDto implements IUserProfileCommentDto {
    predefinedCommentTypes?: CommentTypeDto[];
    timeFrom?: Date;
    timeTo?: Date;
    isAppointmentOnly: boolean;

    constructor(data?: IUserProfileCommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["PredefinedCommentTypes"] && data["PredefinedCommentTypes"].constructor === Array) {
                this.predefinedCommentTypes = [];
                for (let item of data["PredefinedCommentTypes"])
                    this.predefinedCommentTypes.push(CommentTypeDto.fromJS(item));
            }
            this.timeFrom = data["TimeFrom"] ? new Date(data["TimeFrom"].toString()) : <any>undefined;
            this.timeTo = data["TimeTo"] ? new Date(data["TimeTo"].toString()) : <any>undefined;
            this.isAppointmentOnly = data["IsAppointmentOnly"];
        }
    }

    static fromJS(data: any): UserProfileCommentDto {
        let result = new UserProfileCommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.predefinedCommentTypes && this.predefinedCommentTypes.constructor === Array) {
            data["PredefinedCommentTypes"] = [];
            for (let item of this.predefinedCommentTypes)
                data["PredefinedCommentTypes"].push(item.toJSON());
        }
        data["TimeFrom"] = this.timeFrom ? this.timeFrom.toISOString() : <any>undefined;
        data["TimeTo"] = this.timeTo ? this.timeTo.toISOString() : <any>undefined;
        data["IsAppointmentOnly"] = this.isAppointmentOnly;
        return data;
    }
}

export interface IUserProfileCommentDto {
    predefinedCommentTypes?: CommentTypeDto[];
    timeFrom?: Date;
    timeTo?: Date;
    isAppointmentOnly: boolean;
}

export class ColumnConfigDto implements IColumnConfigDto {
    id: number;
    size: number;
    name?: string;
    order: number;
    sort?: string;

    constructor(data?: IColumnConfigDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.size = data["Size"];
            this.name = data["Name"];
            this.order = data["Order"];
            this.sort = data["Sort"];
        }
    }

    static fromJS(data: any): ColumnConfigDto {
        let result = new ColumnConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Size"] = this.size;
        data["Name"] = this.name;
        data["Order"] = this.order;
        data["Sort"] = this.sort;
        return data;
    }
}

export interface IColumnConfigDto {
    id: number;
    size: number;
    name?: string;
    order: number;
    sort?: string;
}

export enum CalendarDisplayMode {
    ResourceView = 0,
    WeekView = 1,
    MonthView = 2,
}

export enum OrderCreationMode {
    NotSpecified = 0,
    ManualOneOne = 1,
    AutoOneOne = 2,
    AutoOneMany = 3,
    ManualOneMany = 5,
}

export class OrderCreationParameterDto extends DtoBase implements IOrderCreationParameterDto {
    paramName?: string;
    paramType?: string;
    isSystemRequired: boolean;
    defaultValue?: string;
    isRequired: boolean;
    promptUserForDefault: boolean;
    id: number;

    constructor(data?: IOrderCreationParameterDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.paramName = data["ParamName"];
            this.paramType = data["ParamType"];
            this.isSystemRequired = data["IsSystemRequired"];
            this.defaultValue = data["DefaultValue"];
            this.isRequired = data["IsRequired"];
            this.promptUserForDefault = data["PromptUserForDefault"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): OrderCreationParameterDto {
        let result = new OrderCreationParameterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ParamName"] = this.paramName;
        data["ParamType"] = this.paramType;
        data["IsSystemRequired"] = this.isSystemRequired;
        data["DefaultValue"] = this.defaultValue;
        data["IsRequired"] = this.isRequired;
        data["PromptUserForDefault"] = this.promptUserForDefault;
        data["Id"] = this.id;
        super.toJSON(data);
        return data;
    }
}

export interface IOrderCreationParameterDto extends IDtoBase {
    paramName?: string;
    paramType?: string;
    isSystemRequired: boolean;
    defaultValue?: string;
    isRequired: boolean;
    promptUserForDefault: boolean;
    id: number;
}

export class AccountSettingCollectionDto implements IAccountSettingCollectionDto {
    items?: AccountSettingDto[];

    constructor(data?: IAccountSettingCollectionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(AccountSettingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AccountSettingCollectionDto {
        let result = new AccountSettingCollectionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAccountSettingCollectionDto {
    items?: AccountSettingDto[];
}

export class AccountSettingDto implements IAccountSettingDto {
    id: number;
    name?: string;
    value?: string;
    application?: string;
    createDate: Date;
    createUser?: string;
    updateDate?: Date;
    updateUser?: string;
    isActive: boolean;

    constructor(data?: IAccountSettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.value = data["Value"];
            this.application = data["Application"];
            this.createDate = data["CreateDate"] ? new Date(data["CreateDate"].toString()) : <any>undefined;
            this.createUser = data["CreateUser"];
            this.updateDate = data["UpdateDate"] ? new Date(data["UpdateDate"].toString()) : <any>undefined;
            this.updateUser = data["UpdateUser"];
            this.isActive = data["IsActive"];
        }
    }

    static fromJS(data: any): AccountSettingDto {
        let result = new AccountSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Value"] = this.value;
        data["Application"] = this.application;
        data["CreateDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["CreateUser"] = this.createUser;
        data["UpdateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["UpdateUser"] = this.updateUser;
        data["IsActive"] = this.isActive;
        return data;
    }
}

export interface IAccountSettingDto {
    id: number;
    name?: string;
    value?: string;
    application?: string;
    createDate: Date;
    createUser?: string;
    updateDate?: Date;
    updateUser?: string;
    isActive: boolean;
}

export class AccountGenerateIDconfigDto extends DtoBase implements IAccountGenerateIDconfigDto {
    accountId?: string;
    location?: string;
    customLocationCode?: string;
    idTypeName?: string;
    iDFormatString?: string;
    preFix?: string;
    postFix?: string;
    startingSeq?: number;
    nextAvailableSeq?: number;
    isSeqPadded?: boolean;
    seqPaddingLen?: number;
    seqPaddingChar?: string;
    seqPaddingDir?: string;
    useGuid: boolean;
    guidLen?: number;
    id: number;
    entityStatus: EntityStatus;

    constructor(data?: IAccountGenerateIDconfigDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.accountId = data["AccountId"];
            this.location = data["Location"];
            this.customLocationCode = data["CustomLocationCode"];
            this.idTypeName = data["IdTypeName"];
            this.iDFormatString = data["IDFormatString"];
            this.preFix = data["PreFix"];
            this.postFix = data["PostFix"];
            this.startingSeq = data["StartingSeq"];
            this.nextAvailableSeq = data["NextAvailableSeq"];
            this.isSeqPadded = data["IsSeqPadded"];
            this.seqPaddingLen = data["SeqPaddingLen"];
            this.seqPaddingChar = data["SeqPaddingChar"];
            this.seqPaddingDir = data["SeqPaddingDir"];
            this.useGuid = data["UseGuid"];
            this.guidLen = data["GuidLen"];
            this.id = data["Id"];
            this.entityStatus = data["EntityStatus"];
        }
    }

    static fromJS(data: any): AccountGenerateIDconfigDto {
        let result = new AccountGenerateIDconfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AccountId"] = this.accountId;
        data["Location"] = this.location;
        data["CustomLocationCode"] = this.customLocationCode;
        data["IdTypeName"] = this.idTypeName;
        data["IDFormatString"] = this.iDFormatString;
        data["PreFix"] = this.preFix;
        data["PostFix"] = this.postFix;
        data["StartingSeq"] = this.startingSeq;
        data["NextAvailableSeq"] = this.nextAvailableSeq;
        data["IsSeqPadded"] = this.isSeqPadded;
        data["SeqPaddingLen"] = this.seqPaddingLen;
        data["SeqPaddingChar"] = this.seqPaddingChar;
        data["SeqPaddingDir"] = this.seqPaddingDir;
        data["UseGuid"] = this.useGuid;
        data["GuidLen"] = this.guidLen;
        data["Id"] = this.id;
        data["EntityStatus"] = this.entityStatus;
        super.toJSON(data);
        return data;
    }
}

export interface IAccountGenerateIDconfigDto extends IDtoBase {
    accountId?: string;
    location?: string;
    customLocationCode?: string;
    idTypeName?: string;
    iDFormatString?: string;
    preFix?: string;
    postFix?: string;
    startingSeq?: number;
    nextAvailableSeq?: number;
    isSeqPadded?: boolean;
    seqPaddingLen?: number;
    seqPaddingChar?: string;
    seqPaddingDir?: string;
    useGuid: boolean;
    guidLen?: number;
    id: number;
    entityStatus: EntityStatus;
}

export enum EntityStatus {
    NotModified = 0,
    Deleted = 1,
    Added = 2,
    Modified = 3,
}

export class AuthorizationAlertDto extends DtoBase implements IAuthorizationAlertDto {
    id: number;
    payerId: number;
    payerName?: string;
    authorizationProcedures?: AuthorizationProcedureDto[];
    isDeleted: boolean;

    constructor(data?: IAuthorizationAlertDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["Id"];
            this.payerId = data["PayerId"];
            this.payerName = data["PayerName"];
            if (data["AuthorizationProcedures"] && data["AuthorizationProcedures"].constructor === Array) {
                this.authorizationProcedures = [];
                for (let item of data["AuthorizationProcedures"])
                    this.authorizationProcedures.push(AuthorizationProcedureDto.fromJS(item));
            }
            this.isDeleted = data["IsDeleted"];
        }
    }

    static fromJS(data: any): AuthorizationAlertDto {
        let result = new AuthorizationAlertDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PayerId"] = this.payerId;
        data["PayerName"] = this.payerName;
        if (this.authorizationProcedures && this.authorizationProcedures.constructor === Array) {
            data["AuthorizationProcedures"] = [];
            for (let item of this.authorizationProcedures)
                data["AuthorizationProcedures"].push(item.toJSON());
        }
        data["IsDeleted"] = this.isDeleted;
        super.toJSON(data);
        return data;
    }
}

export interface IAuthorizationAlertDto extends IDtoBase {
    id: number;
    payerId: number;
    payerName?: string;
    authorizationProcedures?: AuthorizationProcedureDto[];
    isDeleted: boolean;
}

export class AuthorizationProcedureDto implements IAuthorizationProcedureDto {
    id: number;
    payerId: number;
    description?: string;
    code?: string;
    procedureAmount?: string;
    procedureUnit?: string;
    isDeleted: boolean;

    constructor(data?: IAuthorizationProcedureDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.payerId = data["PayerId"];
            this.description = data["Description"];
            this.code = data["Code"];
            this.procedureAmount = data["ProcedureAmount"];
            this.procedureUnit = data["ProcedureUnit"];
            this.isDeleted = data["IsDeleted"];
        }
    }

    static fromJS(data: any): AuthorizationProcedureDto {
        let result = new AuthorizationProcedureDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["PayerId"] = this.payerId;
        data["Description"] = this.description;
        data["Code"] = this.code;
        data["ProcedureAmount"] = this.procedureAmount;
        data["ProcedureUnit"] = this.procedureUnit;
        data["IsDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IAuthorizationProcedureDto {
    id: number;
    payerId: number;
    description?: string;
    code?: string;
    procedureAmount?: string;
    procedureUnit?: string;
    isDeleted: boolean;
}

export class WorkingScheduleDto implements IWorkingScheduleDto {
    items?: WorkingScheduleItemDto[];
    holidays?: HolidayDto[];

    constructor(data?: IWorkingScheduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Items"] && data["Items"].constructor === Array) {
                this.items = [];
                for (let item of data["Items"])
                    this.items.push(WorkingScheduleItemDto.fromJS(item));
            }
            if (data["Holidays"] && data["Holidays"].constructor === Array) {
                this.holidays = [];
                for (let item of data["Holidays"])
                    this.holidays.push(HolidayDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WorkingScheduleDto {
        let result = new WorkingScheduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        if (this.holidays && this.holidays.constructor === Array) {
            data["Holidays"] = [];
            for (let item of this.holidays)
                data["Holidays"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWorkingScheduleDto {
    items?: WorkingScheduleItemDto[];
    holidays?: HolidayDto[];
}

export class WorkingScheduleItemDto implements IWorkingScheduleItemDto {
    id: number;
    modalityId: number;
    weekDay?: string;
    startTime: Date;
    endTime: Date;
    breakFrom?: Date;
    breakTo?: Date;
    isActive: boolean;

    constructor(data?: IWorkingScheduleItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.modalityId = data["ModalityId"];
            this.weekDay = data["WeekDay"];
            this.startTime = data["StartTime"] ? new Date(data["StartTime"].toString()) : <any>undefined;
            this.endTime = data["EndTime"] ? new Date(data["EndTime"].toString()) : <any>undefined;
            this.breakFrom = data["BreakFrom"] ? new Date(data["BreakFrom"].toString()) : <any>undefined;
            this.breakTo = data["BreakTo"] ? new Date(data["BreakTo"].toString()) : <any>undefined;
            this.isActive = data["IsActive"];
        }
    }

    static fromJS(data: any): WorkingScheduleItemDto {
        let result = new WorkingScheduleItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["ModalityId"] = this.modalityId;
        data["WeekDay"] = this.weekDay;
        data["StartTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["EndTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["BreakFrom"] = this.breakFrom ? this.breakFrom.toISOString() : <any>undefined;
        data["BreakTo"] = this.breakTo ? this.breakTo.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        return data;
    }
}

export interface IWorkingScheduleItemDto {
    id: number;
    modalityId: number;
    weekDay?: string;
    startTime: Date;
    endTime: Date;
    breakFrom?: Date;
    breakTo?: Date;
    isActive: boolean;
}

export class HolidayDto implements IHolidayDto {
    name?: string;
    startTime: Date;
    endTime: Date;
    repeat: boolean;
    id: number;

    constructor(data?: IHolidayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["Name"];
            this.startTime = data["StartTime"] ? new Date(data["StartTime"].toString()) : <any>undefined;
            this.endTime = data["EndTime"] ? new Date(data["EndTime"].toString()) : <any>undefined;
            this.repeat = data["Repeat"];
            this.id = data["Id"];
        }
    }

    static fromJS(data: any): HolidayDto {
        let result = new HolidayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["StartTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["EndTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["Repeat"] = this.repeat;
        data["Id"] = this.id;
        return data;
    }
}

export interface IHolidayDto {
    name?: string;
    startTime: Date;
    endTime: Date;
    repeat: boolean;
    id: number;
}






export class RacesDto implements IRacesDto {
    races?: RaceDto[];

    constructor(data?: IRacesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Races"] && data["Races"].constructor === Array) {
                this.races = [];
                for (let item of data["Races"])
                    this.races.push(RaceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RacesDto {
        let result = new RacesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.races && this.races.constructor === Array) {
            data["Races"] = [];
            for (let item of this.races)
                data["Races"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRacesDto {
    races?: RaceDto[];
}

export class RaceDto implements IRaceDto {
    id: number;
    description?: string;
    hL7Code?: string;
    text?: string;

    constructor(data?: IRaceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.description = data["Description"];
            this.hL7Code = data["HL7Code"];
            this.text = data["Text"];
        }
    }

    static fromJS(data: any): RaceDto {
        let result = new RaceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Description"] = this.description;
        data["HL7Code"] = this.hL7Code;
        data["Text"] = this.text;
        return data;
    }
}

export interface IRaceDto {
    id: number;
    description?: string;
    hL7Code?: string;
    text?: string;
}

export class EthnicitiesDto implements IEthnicitiesDto {
    entities?: EthnicityDto[];

    constructor(data?: IEthnicitiesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["Entities"] && data["Entities"].constructor === Array) {
                this.entities = [];
                for (let item of data["Entities"])
                    this.entities.push(EthnicityDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EthnicitiesDto {
        let result = new EthnicitiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.entities && this.entities.constructor === Array) {
            data["Entities"] = [];
            for (let item of this.entities)
                data["Entities"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEthnicitiesDto {
    entities?: EthnicityDto[];
}

export class EthnicityDto implements IEthnicityDto {
    id: number;
    description?: string;

    constructor(data?: IEthnicityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["Id"];
            this.description = data["Description"];
        }
    }

    static fromJS(data: any): EthnicityDto {
        let result = new EthnicityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Description"] = this.description;
        return data;
    }
}

export interface IEthnicityDto {
    id: number;
    description?: string;
}

export class AppointmentCheckListItemDto extends DtoBase implements IAppointmentCheckListItemDto {
    id: number;
    name?: string;
    template?: TaskTemplateDto;

    constructor(data?: IAppointmentCheckListItemDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            this.template = data["Template"] ? TaskTemplateDto.fromJS(data["Template"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AppointmentCheckListItemDto {
        let result = new AppointmentCheckListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Template"] = this.template ? this.template.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAppointmentCheckListItemDto extends IDtoBase {
    id: number;
    name?: string;
    template?: TaskTemplateDto;
}

export class TaskTemplateDto extends DtoBase implements ITaskTemplateDto {
    id: number;
    name?: string;
    tasks?: TaskDto[];
    deletedTask?: TaskDto;
    pendingTask?: TaskDto;
    inProgressTask?: TaskDto;
    completedTask?: TaskDto;

    constructor(data?: ITaskTemplateDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.id = data["Id"];
            this.name = data["Name"];
            if (data["Tasks"] && data["Tasks"].constructor === Array) {
                this.tasks = [];
                for (let item of data["Tasks"])
                    this.tasks.push(TaskDto.fromJS(item));
            }
            this.deletedTask = data["DeletedTask"] ? TaskDto.fromJS(data["DeletedTask"]) : <any>undefined;
            this.pendingTask = data["PendingTask"] ? TaskDto.fromJS(data["PendingTask"]) : <any>undefined;
            this.inProgressTask = data["InProgressTask"] ? TaskDto.fromJS(data["InProgressTask"]) : <any>undefined;
            this.completedTask = data["CompletedTask"] ? TaskDto.fromJS(data["CompletedTask"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TaskTemplateDto {
        let result = new TaskTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["Name"] = this.name;
        if (this.tasks && this.tasks.constructor === Array) {
            data["Tasks"] = [];
            for (let item of this.tasks)
                data["Tasks"].push(item.toJSON());
        }
        data["DeletedTask"] = this.deletedTask ? this.deletedTask.toJSON() : <any>undefined;
        data["PendingTask"] = this.pendingTask ? this.pendingTask.toJSON() : <any>undefined;
        data["InProgressTask"] = this.inProgressTask ? this.inProgressTask.toJSON() : <any>undefined;
        data["CompletedTask"] = this.completedTask ? this.completedTask.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ITaskTemplateDto extends IDtoBase {
    id: number;
    name?: string;
    tasks?: TaskDto[];
    deletedTask?: TaskDto;
    pendingTask?: TaskDto;
    inProgressTask?: TaskDto;
    completedTask?: TaskDto;
}


export enum EhrTaskStatus {
    Pending = 0,
    InProgress = 1,
    Completed = 2,
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    // else
    //     throw new SwaggerException(message, status, response, headers, null);
}